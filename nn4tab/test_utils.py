# AUTOGENERATED! DO NOT EDIT! File to edit: 00a_test_utils.ipynb (unless otherwise specified).

__all__ = ['fake_data']

# Cell
import numpy as np
import pandas as pd
from collections import namedtuple
import random
from math import isclose
import string
import pdb

# Cell
def fake_data(n=1000, n_cont=5, n_cat=2, task='class', preproc=True, nons=False):
    """
    Generates randomized tabular dataframe conatining:
    n samples, n_cont continious features, n_cat categorical features.
    If preproc is True, continious values are normalized and categorical features
    are numericalized.
    [!not done yet]If nons is True, some NoN values are added randomly
    """
    rng = np.random.default_rng(8)

    loc = 0. if preproc else rng.uniform(-5, 5, size=(n_cont,))
    scale = 1. if preproc else rng.uniform(1, 5, size=(n_cont,))
    cont = rng.normal(loc, scale, size=(n, n_cont))

    #mb change to support varying cardinality through categories
    cat = rng.integers(3, size=(n, n_cat))
    a = np.array(list(string.ascii_uppercase))
    cat_data = cat if preproc else a[cat]

    cont_names = [f'cont_{i}' for i in range(n_cont)]
    cat_names = [f'cat_{i}' for i in range(n_cat)]


    cont_data = np.where((rng.uniform(size=cont.shape) > 0.9), np.nan, cont) if nons else cont
#         cat_data = np.where((rng.uniform(size=cat_data.shape) > 0.9), np.nan, cat_data)

    left = pd.DataFrame(cont_data, columns=cont_names, dtype=np.float32)
    right = pd.DataFrame(cat_data, columns=cat_names)
    df = left.join(right)

    if nons:
        for col in cat_names:
            df.loc[(rng.uniform(size=len(df[col])) > 0.9), col] = np.nan

    df['targ'] = cont.sum(axis=1) + cat.sum(axis=1) - 1

    if task=='class':
        df['targ'] = (df['targ']>df['targ'].mean()).astype(np.float32)

    return df, cont_names, cat_names