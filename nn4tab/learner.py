# AUTOGENERATED! DO NOT EDIT! File to edit: 03_learner.ipynb (unless otherwise specified).

__all__ = ['AverageMeter', 'accuracy_binary', 'Callback', 'LearnerV0']

# Cell

import math
# import logging

import numpy as np
import matplotlib.pyplot as plt

import torch
from torch import nn
import torch.optim as optim
from torch.optim.lr_scheduler import LambdaLR, OneCycleLR
from torch.utils.data.dataloader import DataLoader

from tqdm import tqdm
from pathlib import Path

# Cell
class AverageMeter:
    def __init__(self, store_vals=False, store_avgs=False):
        self.store_vals = store_vals
        self.store_avgs = store_avgs
        if store_vals: self.values = []
        if store_avgs: self.avgs = []
        self.sum, self.n, self.avg = 0, 0, None

    def update(self, v):
        if self.store_vals: self.values.append(v)
        self.n += 1
        self.sum += v
        self.avg = self.sum/self.n

    def reset(self):
        if self.store_avgs and self.avg: self.avgs.append(self.avg)
        self.sum, self.n, self.avg = 0, 0, None

# Cell
def accuracy_binary(pred, targ):
    return ((pred>0).float() == targ).float().mean()

# Cell
class Callback:
    def __init__(self, learn):
        self.learn = learn

    def __getattr__(self, attr):
        pass

# Cell
class LearnerV0:

    def __init__(self, model, dataloaders, opt_func, loss_func, metrics=None, use_gpu=True, savepath='./models'):

        self.device = 'cuda' if (torch.cuda.is_available() and use_gpu) else 'cpu'
        self.model = model.to(self.device)

        self.train_dl = dataloaders[0]
        self.valid_dl = dataloaders[1]
        self.test_dl = dataloaders[2] if len(dataloaders)>2 else None

        self.opt_func = opt_func
        self.loss_func = loss_func
        self.metrics = metrics

        self.train_losses = AverageMeter(store_vals=True)
        self.valid_losses = AverageMeter(store_avgs=True)
        self.accs = AverageMeter()
#         self.optimizer = opt_func([p for p in self.model.parameters() if p.requires_grad])

        self.savepath = Path(savepath)
        if not self.savepath.exists():
            self.savepath.mkdir()
        self.training = True
        self.epoch = -1

    def fit(self, epochs, lr=1e-2):
        self.optimizer = self.opt_func([p for p in self.model.parameters() if p.requires_grad], lr)
        for e in range(epochs):
            self.epoch += 1
            train_loss = self.train()
            self.train_losses.reset()

            valid_loss, acc = self.validate()
            self.valid_losses.reset()
            self.accs.reset()

#             print('Train loss = {:f}; valid loss = {:f}; {} = {:f}'.\
#                   format(train_loss, valid_loss, self.metrics.__name__, acc))
            self.save_model()


    def train(self):

        self.model.train()
        pbar = tqdm(self.train_dl)
        for x_cat, x_cont, y in pbar:
            x_cat = x_cat.to(self.device, dtype=torch.long)
            x_cont = x_cont.to(self.device)
            y = y.to(self.device)

            self.optimizer.zero_grad()
            pred = self.model(x_cat, x_cont)
            loss = self.loss_func(pred, y)

            loss.backward()
            #torch.nn.utils.clip_grad_norm_(model.parameters(), grad_norm_clip)
            self.optimizer.step()

            self.train_losses.update(loss.item())
            pbar.set_description(f'epoch {self.epoch+1}: train loss {self.train_losses.avg:.4f}')
        return self.train_losses.avg

    def validate(self):

        self.model.eval()
        pbar = tqdm(self.valid_dl)
        for x_cat, x_cont, y in pbar:
            x_cat = x_cat.to(self.device, dtype=torch.long)
            x_cont = x_cont.to(self.device)
            y = y.to(self.device)

            with torch.no_grad():
                pred = self.model(x_cat, x_cont)
                loss = self.loss_func(pred, y)

            self.valid_losses.update(loss.item())
            self.accs.update(accuracy_binary(pred, y).item())
            pbar.set_description(f'epoch {self.epoch+1}: valid loss {self.valid_losses.avg:.4f}, accuracy {self.accs.avg :.4f}')

        return self.valid_losses.avg, self.accs.avg

    def save_model(self, fn='ckpt_', path=None):
        if not path: path = self.savepath
        fn += str(self.epoch) + '.pt'
        torch.save(self.model.state_dict(), path/fn)

    def load_model(self, fn, path=None):
        if not path: path = self.savepath
        self.model.load_state_dict(torch.load(path/fn))